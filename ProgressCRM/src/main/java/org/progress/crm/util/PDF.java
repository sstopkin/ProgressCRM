package org.progress.crm.util;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import org.progress.crm.logic.Apartaments;

public class PDF {

    private static final String FILE = "/tmp/report.pdf";
    private static BaseFont tahoma;
    private static Font times14;

    public static File GeneratePrice(List reportContent, String workerName) {
        try {
            Document document = prepareGen();
            addMetaData(document, "Прайс " + new Date(), "Прайс", "Прайс", workerName, "ProgressCRM");
            addPricePage(document, reportContent, workerName);
//            addContent(document);
            return finalyGen(document);
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static File GenerateApartamentsPage(Apartaments apart, String workerName) {
        try {
            Document document = prepareGen();
            addMetaData(document, "Карточка объекта " + new Date(), "Карточка объекта", "Карточка объекта", workerName, "ProgressCRM");

            Paragraph subPara = new Paragraph();
            Chapter mainChapter = new Chapter(subPara, 1);

            // Will create: Report generated by: _name, _date
            mainChapter.add(new Paragraph("Report generated by: " + workerName + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                    new Font(tahoma, 12)));

            Section subCatPart = mainChapter.addSection(subPara);

//        // Now add all this to the document
            document.add(mainChapter);

//            addContent(document);
            return finalyGen(document);
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private static void addMetaData(Document document, String title, String subject,
            String keywords, String author, String creator) {
        document.addTitle(title);
        document.addSubject(subject);
        document.addKeywords(keywords);
        document.addAuthor(author);
        document.addCreator(creator);
    }

    private static void addPricePage(Document document, List aparts, String workerName)
            throws DocumentException, BadElementException, IOException {
        Paragraph subPara = new Paragraph();
        Chapter mainChapter = new Chapter(subPara, 1);

        // Will create: Report generated by: _name, _date
        mainChapter.add(new Paragraph("Report generated by: " + workerName + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                new Font(tahoma, 12)));

        Section subCatPart = mainChapter.addSection(subPara);

        // Add a table
        createTable(subCatPart, aparts);

//        // Now add all this to the document
        document.add(mainChapter);

        // Start a new page
//        document.newPage();
    }

    private static void createTable(Section subCatPart, List aparts)
            throws BadElementException, DocumentException, IOException {
        PdfPTable table = new PdfPTable(9);

//        table.setBorderColor(BaseColor.GRAY);
//        table.setPadding(4);
//        table.setSpacing(4);
//        table.setBorderWidth(1);
        PdfPCell c1 = new PdfPCell(new Phrase("Цена", new Font(tahoma, 14)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        c1.setBorderColor(BaseColor.GRAY);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("АО", new Font(tahoma, 14)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        c1.setBorderColor(BaseColor.GRAY);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Адрес", new Font(tahoma, 14)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Этаж", new Font(tahoma, 14)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        c1 = new PdfPCell(new Phrase("Площадь", new Font(tahoma, 14)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        c1 = new PdfPCell(new Phrase("Описание", new Font(tahoma, 14)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        c1 = new PdfPCell(new Phrase("Контакты", new Font(tahoma, 14)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        c1 = new PdfPCell(new Phrase("Год", new Font(tahoma, 14)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        c1 = new PdfPCell(new Phrase("Агент", new Font(tahoma, 14)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        for (int i = 0; i < aparts.size(); i++) {
//            List<List<String>> r=(List<ReportPrice>) aparts.get(i);
//            table.addCell(new Phrase(.get(0).toString(), new Font(tahoma, 14)));
//            table.addCell(new Phrase(aparts.get(i),new Font(tahoma, 14)));
//            table.addCell(new Phrase(aparts.get(i),new Font(tahoma, 14)));
//            table.addCell(new Phrase(aparts.get(i),new Font(tahoma, 14)));
            table.addCell(new Phrase(String.valueOf(aparts.get(i)), new Font(tahoma, 14)));
        }

        Paragraph p = new Paragraph("asdasdasdтекст текст текст", new Font(tahoma, 14));

        subCatPart.add(table);
        subCatPart.add(p);
    }

    private static Document prepareGen() throws FileNotFoundException, IOException, DocumentException {
        tahoma = BaseFont.createFont("/var/progresscrm/tahoma.ttf", "cp1251", BaseFont.EMBEDDED);
        times14 = new Font(tahoma, 14);
        Document document = new Document(PageSize.LETTER.rotate());//Page landscape orientation
        PdfWriter.getInstance(document, new FileOutputStream(FILE));
        document.open();
        return document;
    }

    private static File finalyGen(Document document) {
        document.close();
        File output = new File(FILE);
        return output;
    }
}
